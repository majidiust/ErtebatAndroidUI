package org.ertebat.pdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.ertebat.pdb.MessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_ENTITY.
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property FromUserName = new Property(2, String.class, "fromUserName", false, "FROM_USER_NAME");
        public final static Property FromUserId = new Property(3, String.class, "fromUserId", false, "FROM_USER_ID");
        public final static Property To = new Property(4, String.class, "to", false, "TO");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Body = new Property(7, String.class, "body", false, "BODY");
        public final static Property IsRead = new Property(8, Boolean.class, "isRead", false, "IS_READ");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
    };


    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE_ID' TEXT," + // 1: messageId
                "'FROM_USER_NAME' TEXT," + // 2: fromUserName
                "'FROM_USER_ID' TEXT," + // 3: fromUserId
                "'TO' TEXT," + // 4: to
                "'DATE' TEXT," + // 5: date
                "'TIME' TEXT," + // 6: time
                "'BODY' TEXT," + // 7: body
                "'IS_READ' INTEGER," + // 8: isRead
                "'TYPE' TEXT);"); // 9: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String fromUserName = entity.getFromUserName();
        if (fromUserName != null) {
            stmt.bindString(3, fromUserName);
        }
 
        String fromUserId = entity.getFromUserId();
        if (fromUserId != null) {
            stmt.bindString(4, fromUserId);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(5, to);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(8, body);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(9, isRead ? 1l: 0l);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromUserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromUserId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // to
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // body
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isRead
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFromUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBody(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsRead(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
