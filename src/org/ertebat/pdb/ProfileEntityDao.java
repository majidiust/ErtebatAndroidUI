package org.ertebat.pdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.ertebat.pdb.ProfileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROFILE_ENTITY.
*/
public class ProfileEntityDao extends AbstractDao<ProfileEntity, Long> {

    public static final String TABLENAME = "PROFILE_ENTITY";

    /**
     * Properties of entity ProfileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property Uuid = new Property(3, String.class, "uuid", false, "UUID");
        public final static Property PictureURL = new Property(4, String.class, "pictureURL", false, "PICTURE_URL");
        public final static Property FirstName = new Property(5, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(6, String.class, "lastName", false, "LAST_NAME");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
    };


    public ProfileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROFILE_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_NAME' TEXT," + // 1: userName
                "'TOKEN' TEXT," + // 2: token
                "'UUID' TEXT," + // 3: uuid
                "'PICTURE_URL' TEXT," + // 4: pictureURL
                "'FIRST_NAME' TEXT," + // 5: firstName
                "'LAST_NAME' TEXT," + // 6: lastName
                "'EMAIL' TEXT);"); // 7: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROFILE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProfileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        String pictureURL = entity.getPictureURL();
        if (pictureURL != null) {
            stmt.bindString(5, pictureURL);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(6, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(7, lastName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProfileEntity readEntity(Cursor cursor, int offset) {
        ProfileEntity entity = new ProfileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pictureURL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProfileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPictureURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProfileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProfileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
